Here is your complete working Angular code for:

Displaying all employees with their IDs

Posting a new employee

Updating an employee by ID

Deleting an employee by ID


Backend assumed to follow /employee, /employee/{id} endpoints as per your Spring Boot code.


---

1. employee.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080/employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(BASE_URL);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(BASE_URL, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/${id}`);
  }
}


---

2. get-all-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html'
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService, private router: Router) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe(res => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      });
    }
  }

  navigateToUpdate(id: number): void {
    this.router.navigate(['/employee', id]);
  }
}


---

3. get-all-employee.component.html

<h2>Employee List</h2>
<a routerLink="/employee">Add Employee</a>

<table border="1">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Department</th>
    <th>Salary</th>
    <th>Actions</th>
  </tr>
  <tr *ngFor="let employee of employees">
    <td>{{ employee.id }}</td>
    <td>{{ employee.name }}</td>
    <td>{{ employee.department }}</td>
    <td>{{ employee.salary }}</td>
    <td>
      <button (click)="navigateToUpdate(employee.id)">Update</button>
      <button (click)="deleteEmployee(employee.id)">Delete</button>
    </td>
  </tr>
</table>


---

4. post-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-post-employee',
  templateUrl: './post-employee.component.html'
})
export class PostEmployeeComponent implements OnInit {
  postEmployeeForm: FormGroup;

  constructor(private fb: FormBuilder, private employeeService: EmployeeService, private router: Router) {}

  ngOnInit(): void {
    this.postEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });
  }

  postEmployee(): void {
    this.employeeService.postEmployee(this.postEmployeeForm.value).subscribe(() => {
      this.router.navigate(['/']);
    });
  }
}


---

5. post-employee.component.html

<h2>Post New Employee</h2>

<form [formGroup]="postEmployeeForm" (ngSubmit)="postEmployee()">
  <label>Name:</label>
  <input formControlName="name" /><br/>

  <label>Department:</label>
  <input formControlName="department" /><br/>

  <label>Salary:</label>
  <input formControlName="salary" /><br/>

  <button type="submit">Post</button>
</form>


---

6. update-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html'
})
export class UpdateEmployeeComponent implements OnInit {
  updateEmployeeForm: FormGroup;
  employeeId: number;

  constructor(
    private route: ActivatedRoute,
    private fb: FormBuilder,
    private employeeService: EmployeeService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.employeeId = +this.route.snapshot.paramMap.get('id')!;
    this.updateEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });

    this.employeeService.getEmployeeById(this.employeeId).subscribe(data => {
      this.updateEmployeeForm.patchValue(data);
    });
  }

  updateEmployee(): void {
    this.employeeService.updateEmployee(this.employeeId, this.updateEmployeeForm.value).subscribe(() => {
      this.router.navigate(['/']);
    });
  }
}


---

7. update-employee.component.html

<h2>Update Employee</h2>

<form [formGroup]="updateEmployeeForm" (ngSubmit)="updateEmployee()">
  <label>Name:</label>
  <input formControlName="name" /><br/>

  <label>Department:</label>
  <input formControlName="department" /><br/>

  <label>Salary:</label>
  <input formControlName="salary" /><br/>

  <button type="submit">Update</button>
</form>


---

8. app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

Let me know if you want a zip file with these or help with CSS/styling next.
