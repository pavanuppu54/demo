Hereâ€™s the updated and fully functional Angular code for:

get-all-employee.component.ts

get-all-employee.component.html

post-employee.component.ts

post-employee.component.html

employee.service.ts


All functions work based on id and also display the id in the list.


---

get-all-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      }, error => {
        console.error('Error deleting employee', error);
      });
    }
  }
}


---

get-all-employee.component.html

<div class="container">
  <h2>Employee List</h2>
  <button class="add-button" routerLink="/employee">Add Employee</button>
  <table class="employee-table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.id }}</td>
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', employee.id]">Update</button>
          <button class="delete-button" (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

post-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-post-employee',
  templateUrl: './post-employee.component.html',
  styleUrls: ['./post-employee.component.css']
})
export class PostEmployeeComponent implements OnInit {
  postEmployeeForm!: FormGroup;

  constructor(
    private fb: FormBuilder,
    private employeeService: EmployeeService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.postEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });
  }

  postEmployee(): void {
    this.employeeService.postEmployee(this.postEmployeeForm.value).subscribe(() => {
      alert('Employee added successfully!');
      this.postEmployeeForm.reset();
      this.router.navigate(['/']);
    });
  }
}


---

post-employee.component.html

<div class="form-container">
  <h2>Post New Employee</h2>
  <form [formGroup]="postEmployeeForm" (ngSubmit)="postEmployee()">
    <div class="form-group">
      <label>Name:</label>
      <input type="text" formControlName="name" required />
    </div>
    <div class="form-group">
      <label>Department:</label>
      <input type="text" formControlName="department" required />
    </div>
    <div class="form-group">
      <label>Salary: </label>
      <input type="number" formControlName="salary" required />
    </div>
    <button type="submit">Post</button>
  </form>
</div>


---

employee.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080/employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/${id}`);
  }
}


---

Let me know if you want the update-employee.component.ts and HTML as well.

