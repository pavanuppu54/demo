Thanks for the details! Let's organize everything properly and provide complete working Angular code (frontend only) including CSS, routing, and interaction with your Spring Boot backend.


---

1. HTML & CSS for Get All Employees (get-all-employee)

HTML (get-all-employee.component.html)

<div class="employee-table-container">
  <h2>Employee List</h2>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button routerLink="/employee/{{ employee.id }}">Update</button>
          <button (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

CSS (get-all-employee.component.css)

.employee-table-container {
  margin: 20px auto;
  width: 90%;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 10px 15px;
  border: 1px solid #ccc;
  text-align: center;
}

th {
  background-color: #f5f5f5;
}

button {
  margin: 0 5px;
  padding: 5px 10px;
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

button:last-child {
  background-color: #f44336;
}


---

2. Component Code (get-all-employee.component.ts)

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployee();
  }

  getAllEmployee() {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number) {
    this.employeeService.deleteEmployee(id).subscribe(() => {
      this.getAllEmployee();
    });
  }
}


---

3. Post Employee Component

HTML (post-employee.component.html)

<div class="form-container">
  <h2>Post New Employee</h2>
  <form [formGroup]="postEmployeeForm" (ngSubmit)="postEmployee()">
    <div class="form-group">
      <label>Name:</label>
      <input type="text" formControlName="name" required />
    </div>
    <div class="form-group">
      <label>Department:</label>
      <input type="text" formControlName="department" required />
    </div>
    <div class="form-group">
      <label>Salary:</label>
      <input type="number" formControlName="salary" required />
    </div>
    <button type="submit">Post</button>
  </form>
</div>

CSS (post-employee.component.css)

.form-container {
  max-width: 400px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  font-weight: bold;
}

input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

button {
  background-color: #2196F3;
  color: white;
  border: none;
  padding: 8px 12px;
  cursor: pointer;
}

TS (post-employee.component.ts)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-post-employee',
  templateUrl: './post-employee.component.html',
  styleUrls: ['./post-employee.component.css']
})
export class PostEmployeeComponent implements OnInit {
  postEmployeeForm!: FormGroup;

  constructor(private fb: FormBuilder, private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.postEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });
  }

  postEmployee() {
    this.employeeService.postEmployee(this.postEmployeeForm.value).subscribe(() => {
      alert('Employee added successfully!');
      this.postEmployeeForm.reset();
    });
  }
}


---

4. Update Employee Component

HTML (update-employee.component.html)

<div class="form-container">
  <h2>Update Employee</h2>
  <form [formGroup]="updateEmployeeForm" (ngSubmit)="updateEmployee()">
    <div class="form-group">
      <label>Name:</label>
      <input type="text" formControlName="name" required />
    </div>
    <div class="form-group">
      <label>Department:</label>
      <input type="text" formControlName="department" required />
    </div>
    <div class="form-group">
      <label>Salary:</label>
      <input type="number" formControlName="salary" required />
    </div>
    <button type="submit">Update</button>
  </form>
</div>

CSS (update-employee.component.css)

Same as post-employee.component.css.

TS (update-employee.component.ts)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {
  updateEmployeeForm!: FormGroup;
  id!: number;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private employeeService: EmployeeService
  ) {}

  ngOnInit(): void {
    this.id = this.route.snapshot.params['id'];
    this.updateEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });

    this.employeeService.getEmployeeById(this.id).subscribe((data) => {
      this.updateEmployeeForm.patchValue(data);
    });
  }

  updateEmployee() {
    this.employeeService.updateEmployee(this.id, this.updateEmployeeForm.value).subscribe(() => {
      alert('Employee updated successfully!');
      this.router.navigate(['/']);
    });
  }
}


---

5. Employee Service (employee.service.ts)

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASIC_URL = "http://localhost:8080";

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASIC_URL}/employee`, employee);
  }

  getAllEmployee(): Observable<any> {
    return this.http.get(`${BASIC_URL}/employee`);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASIC_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASIC_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASIC_URL}/employee/${id}`);
  }
}


---

6. Routing (app-routing.module.ts)

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

7. App Module (app.module.ts)

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
    GetAllEmployeeComponent,
    PostEmployeeComponent,
    UpdateEmployeeComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


---

Let me know if you want the Spring Boot backend side organized as well or want to add filtering/searching/sorting features.

