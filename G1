Here’s your complete working setup for the Angular frontend with routing, form handling, and working update/delete operations using id. Follow this exactly and you won’t get any template or binding errors.


---

✅ 1. app.module.ts

Make sure you import these modules:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';

import { AppComponent } from './app.component';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';
import { AppRoutingModule } from './app-routing.module';

@NgModule({
  declarations: [
    AppComponent,
    GetAllEmployeeComponent,
    PostEmployeeComponent,
    UpdateEmployeeComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    HttpClientModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


---

✅ 2. app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

✅ 3. employee.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080';

@Injectable({ providedIn: 'root' })
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}/employee`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}/employee`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/employee/${id}`);
  }
}


---

✅ 4. get-all-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe(res => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      });
    }
  }
}


---

✅ 5. get-all-employee.component.html

<div class="container">
  <h2>Employee List</h2>
  <button routerLink="/employee">Add Employee</button>
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.id }}</td>
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button [routerLink]="['/employee', employee.id]">Update</button>
          <button (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

✅ 6. post-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-post-employee',
  templateUrl: './post-employee.component.html',
  styleUrls: ['./post-employee.component.css']
})
export class PostEmployeeComponent implements OnInit {
  postEmployeeForm!: FormGroup;

  constructor(
    private fb: FormBuilder,
    private employeeService: EmployeeService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.postEmployeeForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });
  }

  postEmployee(): void {
    this.employeeService.postEmployee(this.postEmployeeForm.value).subscribe(() => {
      alert('Employee added successfully!');
      this.router.navigate(['/']);
    });
  }
}


---

✅ 7. post-employee.component.html

<div class="form-container">
  <h2>Post New Employee</h2>
  <form [formGroup]="postEmployeeForm" (ngSubmit)="postEmployee()">
    <label>Name:</label>
    <input type="text" formControlName="name" />

    <label>Department:</label>
    <input type="text" formControlName="department" />

    <label>Salary:</label>
    <input type="number" formControlName="salary" />

    <button type="submit">Post</button>
  </form>
</div>


---

✅ 8. update-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {
  updateForm!: FormGroup;
  employeeId!: number;

  constructor(
    private route: ActivatedRoute,
    private fb: FormBuilder,
    private employeeService: EmployeeService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.employeeId = Number(this.route.snapshot.paramMap.get('id'));

    this.updateForm = this.fb.group({
      name: [''],
      department: [''],
      salary: ['']
    });

    this.employeeService.getEmployeeById(this.employeeId).subscribe(data => {
      this.updateForm.patchValue(data);
    });
  }

  updateEmployee(): void {
    this.employeeService.updateEmployee(this.employeeId, this.updateForm.value).subscribe(() => {
      alert('Employee updated successfully!');
      this.router.navigate(['/']);
    });
  }
}


---

✅ 9. update-employee.component.html

<div class="form-container">
  <h2>Update Employee</h2>
  <form [formGroup]="updateForm" (ngSubmit)="updateEmployee()">
    <label>Name:</label>
    <input type="text" formControlName="name" />

    <label>Department:</label>
    <input type="text" formControlName="department" />

    <label>Salary:</label>
    <input type="number" formControlName="salary" />

    <button type="submit">Update</button>
  </form>
</div>


---

Final Steps:

Make sure all the paths and file names are correct.

Restart your Angular server after updating everything.


Let me know if you want me to bundle this as a zip or GitHub repo template.
