Certainly! Let's create a home page for your Angular employee management application that includes:

An "Add Employee" button.

A table listing all employees.

Functional "Update" and "Delete" buttons for each employee.


1. Home Page Template (get-all-employee.component.html)

<div class="container">
  <h2>Employee Management</h2>
  <button class="add-button" routerLink="/employee">Add Employee</button>

  <table class="employee-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', employee.id]">Update</button>
          <button class="delete-button" (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

2. Component Logic (get-all-employee.component.ts)

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService, private router: Router) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      });
    }
  }
}

3. Styling (get-all-employee.component.css)

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.add-button {
  display: block;
  margin: 0 auto 20px auto;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

.employee-table {
  width: 100%;
  border-collapse: collapse;
}

.employee-table th,
.employee-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: center;
}

.employee-table th {
  background-color: #f2f2f2;
}

.update-button {
  background-color: #2196F3;
  color: white;
  border: none;
  padding: 5px 10px;
  margin-right: 5px;
  cursor: pointer;
}

.delete-button {
  background-color: #f44336;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

4. Routing Configuration (app-routing.module.ts)

Ensure your routing module is correctly set up:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

5. Employee Service (employee.service.ts)

Ensure your service has the necessary methods:

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}/employee`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}/employee`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/employee/${id}`);
  }
}

6. Module Declaration (app.module.ts)

Ensure all components and necessary modules are declared and imported:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
    GetAllEmployeeComponent,
    PostEmployeeComponent,
    UpdateEmployeeComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}

With these updates:

The home page displays an "Add Employee" button and a list of all employees.

Each employee has "Update" and "Delete" buttons that function correctly.

The application is properly routed and styled.


Let me know if you need assistance with the "Add" and "Update" employee components or any other part of the application.

