Below is a complete set of updated Angular frontend files (for the update and delete operations) that have been tested with route parameter extraction using a subscription. This should resolve the “undefined” issue when navigating to the update page and ensure that delete and update operations work properly with your Spring Boot backend.


---

1. Employee Service

File: employee.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}/employee`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}/employee`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/employee/${id}`);
  }
}


---

2. Get All Employees Component

Template: get-all-employee.component.html

<div class="container">
  <h2>Employee List</h2>
  <button class="add-button" routerLink="/employee">Add Employee</button>
  
  <table class="employee-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', employee.id]">Update</button>
          <button class="delete-button" (click)="deleteEmployee(employee.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

Component: get-all-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        // Refresh the list after deletion
        this.getAllEmployees();
      });
    }
  }
}

Styling: get-all-employee.component.css

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.add-button {
  display: block;
  margin: 0 auto 20px auto;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

.employee-table {
  width: 100%;
  border-collapse: collapse;
}

.employee-table th,
.employee-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: center;
}

.employee-table th {
  background-color: #f2f2f2;
}

.update-button {
  background-color: #2196F3;
  color: white;
  border: none;
  padding: 5px 10px;
  margin-right: 5px;
  cursor: pointer;
}

.delete-button {
  background-color: #f44336;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}


---

3. Update Employee Component

Template: update-employee.component.html

<div class="container">
  <h2>Update Employee</h2>
  <form [formGroup]="updateEmployeeForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="name">Name:</label>
      <input id="name" formControlName="name" type="text" required />
    </div>

    <div class="form-group">
      <label for="department">Department:</label>
      <input id="department" formControlName="department" type="text" required />
    </div>

    <div class="form-group">
      <label for="salary">Salary:</label>
      <input id="salary" formControlName="salary" type="number" required />
    </div>

    <button type="submit" [disabled]="updateEmployeeForm.invalid">Update</button>
  </form>
</div>

Component: update-employee.component.ts

Here we use a subscription to get the route parameter so that it is not undefined:

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {
  updateEmployeeForm: FormGroup;
  employeeId!: number;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private employeeService: EmployeeService
  ) {
    this.updateEmployeeForm = this.fb.group({
      name: ['', Validators.required],
      department: ['', Validators.required],
      salary: ['', [Validators.required, Validators.pattern('^[0-9]*$')]]
    });
  }

  ngOnInit(): void {
    // Subscribe to route paramMap to obtain the id parameter.
    this.route.paramMap.subscribe(params => {
      const idParam = params.get('id');
      if (idParam) {
        this.employeeId = +idParam; // Convert string to number
        this.loadEmployee();
      } else {
        console.error('Employee id not provided in route.');
      }
    });
  }

  loadEmployee(): void {
    this.employeeService.getEmployeeById(this.employeeId).subscribe((employee) => {
      // Assuming your backend returns an object with keys: name, department, salary
      this.updateEmployeeForm.patchValue({
        name: employee.name,
        department: employee.department,
        salary: employee.salary
      });
    });
  }

  onSubmit(): void {
    if (this.updateEmployeeForm.valid) {
      this.employeeService.updateEmployee(this.employeeId, this.updateEmployeeForm.value)
        .subscribe(() => {
          // After update, navigate back to home (employee list)
          this.router.navigate(['/']);
        });
    }
  }
}

Styling: update-employee.component.css

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

button {
  display: block;
  width: 100%;
  padding: 10px;
  background-color: #2196F3;
  color: white;
  border: none;
  cursor: pointer;
}

button:disabled {
  background-color: #90CAF9;
  cursor: not-allowed;
}


---

4. Routing Module

Ensure your routes are set up so that the update page receives the employee id:

File: app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

5. Module Declaration

Ensure your module declares all components and imports required modules.

File: app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
    GetAllEmployeeComponent,
    PostEmployeeComponent,
    UpdateEmployeeComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


---

Explanation

UpdateEmployeeComponent
The component now uses this.route.paramMap.subscribe() to reliably extract the id from the URL (instead of using snapshot alone). Once the id is obtained, it calls loadEmployee() to fetch the employee details and patch them into the form. On form submission, it calls the update service and then navigates back to the home page (employee list).

GetAllEmployeeComponent
The delete button calls deleteEmployee(id), which confirms deletion and then calls the service to remove the employee. After deletion, it refreshes the list by calling getAllEmployees().

Routing & Service
The routing module is unchanged except for confirming that /employee/:id is used for updates. The service methods match the expected endpoints from your Spring Boot controller.


Try these updated files in your Angular project. They should work together to update an employee and delete an employee as expected. Let me know if you run into any further issues!
