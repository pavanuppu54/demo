Certainly! Based on your Spring Boot backend, here's the updated Angular frontend code to ensure that the Update and Delete functionalities work correctly.


---

🧩 1. Update Employee Component

update-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {
  updateEmployeeForm: FormGroup;
  employeeId: number;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private employeeService: EmployeeService
  ) {
    this.updateEmployeeForm = this.fb.group({
      name: ['', Validators.required],
      department: ['', Validators.required],
      salary: ['', [Validators.required, Validators.pattern('^[0-9]*$')]]
    });
    this.employeeId = 0;
  }

  ngOnInit(): void {
    this.employeeId = Number(this.route.snapshot.paramMap.get('id'));
    this.employeeService.getEmployeeById(this.employeeId).subscribe((employee) => {
      this.updateEmployeeForm.patchValue({
        name: employee.name,
        department: employee.department,
        salary: employee.salary
      });
    });
  }

  onSubmit(): void {
    if (this.updateEmployeeForm.valid) {
      this.employeeService.updateEmployee(this.employeeId, this.updateEmployeeForm.value).subscribe(() => {
        this.router.navigate(['/']);
      });
    }
  }
}

update-employee.component.html

<div class="container">
  <h2>Update Employee</h2>
  <form [formGroup]="updateEmployeeForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="name">Name:</label>
      <input id="name" formControlName="name" type="text" required />
    </div>

    <div class="form-group">
      <label for="department">Department:</label>
      <input id="department" formControlName="department" type="text" required />
    </div>

    <div class="form-group">
      <label for="salary">Salary:</label>
      <input id="salary" formControlName="salary" type="number" required />
    </div>

    <button type="submit" [disabled]="updateEmployeeForm.invalid">Update</button>
  </form>
</div>

update-employee.component.css

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

button {
  display: block;
  width: 100%;
  padding: 10px;
  background-color: #2196F3;
  color: white;
  border: none;
  cursor: pointer;
}

button:disabled {
  background-color: #90CAF9;
  cursor: not-allowed;
}


---

🗑️ 2. Delete Employee Functionality

Update in get-all-employee.component.ts

Ensure the deleteEmployee method is correctly implemented:

deleteEmployee(id: number): void {
  if (confirm('Are you sure you want to delete this employee?')) {
    this.employeeService.deleteEmployee(id).subscribe(() => {
      this.getAllEmployees();
    });
  }
}

Update in get-all-employee.component.html

Ensure the Delete button is correctly bound:

<button class="delete-button" (click)="deleteEmployee(employee.id)">Delete</button>


---

🔧 3. Employee Service Updates

employee.service.ts

Ensure the service methods align with your Spring Boot backend:

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}/employee`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}/employee`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/employee/${id}`);
  }
}


---

📌 4. Routing Configuration

Ensure your routes are correctly defined in app-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

With these updates, your Angular frontend should now correctly handle both Update and Delete operations in alignment with your Spring Boot backend.

Let me know if you need further assistance or additional features!

