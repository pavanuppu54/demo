I understand that you're experiencing issues with the update and delete functionalities in your Angular application. Let's address both problems step by step to ensure they work seamlessly with your Spring Boot backend.


---

🛠️ Update Functionality

Issue:

After submitting the update form, the application doesn't navigate back to the employee list, and the data isn't updated.


Solution:

1. Ensure Proper Form Submission:

Use the ngSubmit directive on the form to handle submission.

Prevent default form submission behavior.



2. Navigate After Successful Update:

Upon successful update, navigate back to the employee list.




Updated update-employee.component.ts:

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {
  updateEmployeeForm: FormGroup;
  employeeId: number = 0;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private employeeService: EmployeeService
  ) {
    this.updateEmployeeForm = this.fb.group({
      name: ['', Validators.required],
      department: ['', Validators.required],
      salary: ['', [Validators.required, Validators.pattern('^[0-9]*$')]]
    });
  }

  ngOnInit(): void {
    this.employeeId = Number(this.route.snapshot.paramMap.get('id'));
    this.employeeService.getEmployeeById(this.employeeId).subscribe((employee) => {
      this.updateEmployeeForm.patchValue({
        name: employee.name,
        department: employee.department,
        salary: employee.salary
      });
    });
  }

  onSubmit(): void {
    if (this.updateEmployeeForm.valid) {
      this.employeeService.updateEmployee(this.employeeId, this.updateEmployeeForm.value).subscribe(() => {
        this.router.navigate(['/']);
      });
    }
  }
}

Updated update-employee.component.html:

<div class="container">
  <h2>Update Employee</h2>
  <form [formGroup]="updateEmployeeForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="name">Name:</label>
      <input id="name" formControlName="name" type="text" required />
    </div>

    <div class="form-group">
      <label for="department">Department:</label>
      <input id="department" formControlName="department" type="text" required />
    </div>

    <div class="form-group">
      <label for="salary">Salary:</label>
      <input id="salary" formControlName="salary" type="number" required />
    </div>

    <button type="submit" [disabled]="updateEmployeeForm.invalid">Update</button>
  </form>
</div>


---

🗑️ Delete Functionality

Issue:

After clicking the delete button, a success message appears, but the employee isn't removed from the list.


Solution:

1. Refresh the Employee List:

After successful deletion, fetch the updated list of employees.



2. Update the Component's Employee Array:

Ensure the component's employee array reflects the latest data.




Updated get-all-employee.component.ts:

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      });
    }
  }
}

Updated get-all-employee.component.html:

<div class="container">
  <h2>Employee List</h2>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let employee of employees">
        <td>{{ employee.name }}</td>
        <td>{{ employee.department }}</td>
        <td>{{ employee.salary }}</td>
        <td>
          <button (click)="deleteEmployee(employee.id)">Delete</button>
          <button [routerLink]="['/employee', employee.id]">Update</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

🔧 Employee Service

Ensure your employee.service.ts has the correct methods:

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

const BASE_URL = 'http://localhost:8080';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  constructor(private http: HttpClient) {}

  getAllEmployee(): Observable<any[]> {
    return this.http.get<any[]>(`${BASE_URL}/employee`);
  }

  postEmployee(employee: any): Observable<any> {
    return this.http.post(`${BASE_URL}/employee`, employee);
  }

  getEmployeeById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}/employee/${id}`);
  }

  updateEmployee(id: number, employee: any): Observable<any> {
    return this.http.put(`${BASE_URL}/employee/${id}`, employee);
  }

  deleteEmployee(id: number): Observable<any> {
    return this.http.delete(`${BASE_URL}/employee/${id}`);
  }
}


---

📌 Routing Configuration

Ensure your routes are correctly defined in app-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GetAllEmployeeComponent } from './components/get-all-employee/get-all-employee.component';
import { PostEmployeeComponent } from './components/post-employee/post-employee.component';
import { UpdateEmployeeComponent } from './components/update-employee/update-employee.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

By implementing these

