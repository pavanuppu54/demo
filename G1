Got it! Let’s add a search input box above your employee table that filters employees by name, department, or anything you want.


---

✅ Step 1: Update get-all-employee.component.html

Add the search input and bind it:

<div class="container">
  <h2>Employee List</h2>

  <input
    type="text"
    placeholder="Search employees..."
    [(ngModel)]="searchText"
    class="search-box"
  />

  <button class="add-button" routerLink="/employee">Add Employee</button>

  <table class="employee-table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>

    <tbody>
      <tr *ngFor="let emp of filteredEmployees()">
        <td>{{ emp.id }}</td>
        <td>{{ emp.name }}</td>
        <td>{{ emp.department }}</td>
        <td>{{ emp.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', emp.id]">
            Update
          </button>
          <button class="delete-button" (click)="deleteEmployee(emp.id)">
            Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

✅ Step 2: Update get-all-employee.component.ts

Add the filter logic:

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css'],
})
export class GetAllEmployeeComponent implements OnInit {
  employees: any[] = [];
  searchText: string = '';

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.getAllEmployees();
      });
    }
  }

  filteredEmployees(): any[] {
    if (!this.searchText.trim()) {
      return this.employees;
    }
    const lower = this.searchText.toLowerCase();
    return this.employees.filter((emp) =>
      (emp.name && emp.name.toLowerCase().includes(lower)) ||
      (emp.department && emp.department.toLowerCase().includes(lower)) ||
      ('' + emp.salary).includes(lower)
    );
  }
}


---

✅ Optional: Add CSS for .search-box in get-all-employee.component.css

.search-box {
  margin-bottom: 10px;
  padding: 8px;
  width: 50%;
  border-radius: 4px;
  border: 1px solid #ccc;
}


---

Now your search input will dynamically filter the employee list as you type. Want to filter by ID too? I can adjust that.
