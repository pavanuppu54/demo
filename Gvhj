Hereâ€™s the full working and updated code for your Angular get-all-employee.component.ts and its HTML, including:

Pagination

Dropdown for page size (3, 5, 8)

Search

Display: "Showing X of Y records"



---

get-all-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-get-all-employee',
  templateUrl: './get-all-employee.component.html',
  styleUrls: ['./get-all-employee.component.css']
})
export class GetAllEmployeeComponent implements OnInit {

  employees: any[] = [];
  searchText: string = '';
  currentPage: number = 1;
  itemsPerPage: number = 5;
  pageSizeOptions: number[] = [3, 5, 8];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getAllEmployees();
  }

  getAllEmployees(): void {
    this.employeeService.getAllEmployee().subscribe((res) => {
      this.employees = res;
    });
  }

  get filteredList(): any[] {
    const lower = this.searchText.toLowerCase();
    return this.employees.filter(emp =>
      (emp.name && emp.name.toLowerCase().includes(lower)) ||
      (emp.department && emp.department.toLowerCase().includes(lower)) ||
      (emp.salary && emp.salary.toString().includes(lower))
    );
  }

  get totalPages(): number {
    return Math.ceil(this.filteredList.length / this.itemsPerPage);
  }

  paginatedEmployees(): any[] {
    const start = (this.currentPage - 1) * this.itemsPerPage;
    return this.filteredList.slice(start, start + this.itemsPerPage);
  }

  changePage(page: number): void {
    this.currentPage = page;
  }

  nextPage(): void {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
    }
  }

  prevPage(): void {
    if (this.currentPage > 1) {
      this.currentPage--;
    }
  }

  deleteEmployee(id: number): void {
    this.employeeService.deleteEmployee(id).subscribe(() => {
      this.getAllEmployees(); // Refresh after delete
    });
  }
}


---

get-all-employee.component.html

<div class="container">
  <h2>Employee List</h2>

  <div class="top-bar">
    <button class="add-button" routerLink="/employee">Add Employee</button>
    <input type="text" placeholder="Search..." [(ngModel)]="searchText" class="search-box" />
  </div>

  <table class="employee-table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let emp of paginatedEmployees()">
        <td>{{ emp.id }}</td>
        <td>{{ emp.name }}</td>
        <td>{{ emp.department }}</td>
        <td>{{ emp.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', emp.id]">Update</button>
          <button class="delete-button" (click)="deleteEmployee(emp.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <!-- Pagination controls -->
  <div class="pagination-controls">
    <button (click)="prevPage()" [disabled]="currentPage === 1">Previous</button>

    <!-- Dropdown for items per page -->
    <label for="itemsPerPage">Show:</label>
    <select id="itemsPerPage" [(ngModel)]="itemsPerPage" (change)="changePage(1)">
      <option *ngFor="let size of pageSizeOptions" [value]="size">{{ size }}</option>
    </select>

    <span>Page {{ currentPage }} of {{ totalPages }}</span>

    <button (click)="nextPage()" [disabled]="currentPage === totalPages">Next</button>
  </div>

  <!-- Record info -->
  <div class="record-info">
    Showing {{ paginatedEmployees().length }} of {{ filteredList.length }} records
  </div>
</div>


---

Let me know if you want styling (CSS) for table, buttons, or pagination!

