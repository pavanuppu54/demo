To implement a soft delete feature in your Angular and Spring Boot application, allowing for restoring or permanently deleting records, follow the steps below:


---

🛠 Backend (Spring Boot)

1. Update the Employee Entity

Add a deleted flag to indicate soft deletion:

@Entity
@Table(name = "employees")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Department is required")
    private String department;

    @Min(value = 1, message = "Salary must be greater than 0")
    private double salary;

    private boolean deleted = false;

    // Getters and setters
}

2. Modify the Repository

Extend JpaRepository and add a method to find non-deleted employees:

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByDeletedFalse();
}

3. Update the Service Layer

Implement methods to handle soft delete, restore, and permanent delete:

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findByDeletedFalse();
    }

    public List<Employee> getDeletedEmployees() {
        return employeeRepository.findAll().stream()
                .filter(Employee::isDeleted)
                .collect(Collectors.toList());
    }

    public void softDeleteEmployee(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        employee.setDeleted(true);
        employeeRepository.save(employee);
    }

    public void restoreEmployee(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        employee.setDeleted(false);
        employeeRepository.save(employee);
    }

    public void permanentlyDeleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}

4. Update the Controller

Add endpoints for soft delete, restore, and permanent delete:

@RestController
@RequestMapping("/employee")
@CrossOrigin
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/deleted")
    public List<Employee> getDeletedEmployees() {
        return employeeService.getDeletedEmployees();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> softDeleteEmployee(@PathVariable Long id) {
        employeeService.softDeleteEmployee(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/restore/{id}")
    public ResponseEntity<Void> restoreEmployee(@PathVariable Long id) {
        employeeService.restoreEmployee(id);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/permanent/{id}")
    public ResponseEntity<Void> permanentlyDeleteEmployee(@PathVariable Long id) {
        employeeService.permanentlyDeleteEmployee(id);
        return ResponseEntity.noContent().build();
    }
}


---

🎨 Frontend (Angular)

1. Update the Service

Add methods to handle soft delete, restore, and permanent delete:

// employee.service.ts
@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private baseUrl = 'http://localhost:8080/employee';

  constructor(private http: HttpClient) {}

  getAllEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(`${this.baseUrl}`);
  }

  getDeletedEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(`${this.baseUrl}/deleted`);
  }

  softDeleteEmployee(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`);
  }

  restoreEmployee(id: number): Observable<void> {
    return this.http.put<void>(`${this.baseUrl}/restore/${id}`, {});
  }

  permanentlyDeleteEmployee(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/permanent/${id}`);
  }
}

2. Create a Component for Deleted Employees

Generate a new component:

ng generate component components/deleted-employees

Implement the logic to display and manage deleted employees:

// deleted-employees.component.ts
@Component({
  selector: 'app-deleted-employees',
  templateUrl: './deleted-employees.component.html',
  styleUrls: ['./deleted-employees.component.css']
})
export class DeletedEmployeesComponent implements OnInit {

  deletedEmployees: Employee[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.loadDeletedEmployees();
  }

  loadDeletedEmployees(): void {
    this.employeeService.getDeletedEmployees().subscribe(data => {
      this.deletedEmployees = data;
    });
  }

  restoreEmployee(id: number): void {
    this.employeeService.restoreEmployee(id).subscribe(() => {
      this.loadDeletedEmployees();
    });
  }

  permanentlyDeleteEmployee(id: number): void {
    this.employeeService.permanentlyDeleteEmployee(id).subscribe(() => {
      this.loadDeletedEmployees();
    });
  }
}

3. Update the Template

<!-- deleted-employees.component.html -->
<div class="container">
  <h2>Recently Deleted Employees</h2>
  <table class="table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let emp of deletedEmployees">
        <td>{{ emp.id }}</td>
        <td>{{ emp.name }}</td>
        <td>{{ emp.department }}</td>
        <td>{{ emp.salary }}</td>
        <td>
          <button class="btn btn-success" (click)="restoreEmployee(emp.id)">Restore</button>
          <button class="btn btn-danger" (click)="permanentlyDeleteEmployee(emp.id)">Delete Permanently</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

4. Update Routing

Add a route for the deleted employees component:

// app-routing.module.ts
const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent },
  { path: 'deleted-employees', component: DeletedEmployeesComponent }
];


---

With these implementations, your application will support soft deletion of employees, allowing users to restore or permanently delete records as needed.
To implement soft delete with a "Recently Deleted" section and options to restore or permanently delete, follow the updated code across the key parts of your Spring Boot app:


---

1. Employee.java (Entity)

Add a new isDeleted field:

@Entity
@Table(name = "employees")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Department is required")
    private String department;

    @Min(value = 1, message = "Salary must be greater than 0")
    private double salary;

    private boolean isDeleted = false; // for soft delete

    // Getters and Setters
}


---

2. EmployeeDTO.java

public class EmployeeDTO {
    private Long id;

    @NotBlank(message = "Name cannot be empty")
    private String name;

    @NotBlank(message = "Department cannot be empty")
    private String department;

    @Min(value = 1, message = "Salary must be positive")
    private double salary;

    public EmployeeDTO() {}

    public EmployeeDTO(Long id, String name, String department, double salary) {
        this.id = id;
        this.name = name;
        this.department = department;
        this.salary = salary;
    }

    // Getters and Setters
}


---

3. EmployeeRepository.java

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByIsDeletedFalse();
    List<Employee> findByIsDeletedTrue();
}


---

4. EmployeeService.java

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public Employee saveEmployee(EmployeeDTO dto) {
        Employee e = new Employee();
        e.setName(dto.getName());
        e.setDepartment(dto.getDepartment());
        e.setSalary(dto.getSalary());
        return employeeRepository.save(e);
    }

    public List<EmployeeDTO> getAllEmployees() {
        return employeeRepository.findByIsDeletedFalse()
            .stream()
            .map(e -> new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary()))
            .collect(Collectors.toList());
    }

    public List<EmployeeDTO> getDeletedEmployees() {
        return employeeRepository.findByIsDeletedTrue()
            .stream()
            .map(e -> new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary()))
            .collect(Collectors.toList());
    }

    public EmployeeDTO getEmployeeById(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));
        return new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary());
    }

    public Employee updateEmployee(Long id, EmployeeDTO dto) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setName(dto.getName());
        e.setDepartment(dto.getDepartment());
        e.setSalary(dto.getSalary());

        return employeeRepository.save(e);
    }

    public void softDeleteEmployee(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setIsDeleted(true);
        employeeRepository.save(e);
    }

    public void restoreEmployee(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setIsDeleted(false);
        employeeRepository.save(e);
    }

    public void permanentlyDeleteEmployee(Long id) {
        if (!employeeRepository.existsById(id)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found");
        }
        employeeRepository.deleteById(id);
    }
}


---

5. EmployeeController.java

@RestController
@RequestMapping("/employee")
@CrossOrigin
@Validated
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@Valid @RequestBody EmployeeDTO dto) {
        Employee created = employeeService.saveEmployee(dto);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity<List<EmployeeDTO>> getAllEmployees() {
        return ResponseEntity.ok(employeeService.getAllEmployees());
    }

    @GetMapping("/deleted")
    public ResponseEntity<List<EmployeeDTO>> getDeletedEmployees() {
        return ResponseEntity.ok(employeeService.getDeletedEmployees());
    }

    @GetMapping("/{id}")
    public ResponseEntity<EmployeeDTO> getEmployeeById(@PathVariable Long id) {
        return ResponseEntity.ok(employeeService.getEmployeeById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @Valid @RequestBody EmployeeDTO dto) {
        return ResponseEntity.ok(employeeService.updateEmployee(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> softDelete(@PathVariable Long id) {
        employeeService.softDeleteEmployee(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Soft deleted successfully");
    }

    @PatchMapping("/restore/{id}")
    public ResponseEntity<String> restore(@PathVariable Long id) {
        employeeService.restoreEmployee(id);
        return ResponseEntity.ok("Restored successfully");
    }

    @DeleteMapping("/permanent/{id}")
    public ResponseEntity<String> permanentDelete(@PathVariable Long id) {
        employeeService.permanentlyDeleteEmployee(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Permanently deleted");
    }
}


---

Let me know if you want the Angular code for displaying the "Recently Deleted" list and restore/permanent delete buttons.

Great! Below is the complete set of frontend codes to support soft delete and manage a “Recently Deleted” section with restore and permanent delete options, matching your backend.


---

1. New Component: recently-deleted

Run this in your terminal:

ng generate component components/recently-deleted


---

2. recently-deleted.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from 'src/app/service/employee.service';

@Component({
  selector: 'app-recently-deleted',
  templateUrl: './recently-deleted.component.html',
  styleUrls: ['./recently-deleted.component.css']
})
export class RecentlyDeletedComponent implements OnInit {
  deletedEmployees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getDeletedEmployees();
  }

  getDeletedEmployees(): void {
    this.employeeService.getDeletedEmployees().subscribe((res) => {
      this.deletedEmployees = res;
    });
  }

  restoreEmployee(id: number): void {
    this.employeeService.restoreEmployee(id).subscribe(() => {
      this.getDeletedEmployees();
    });
  }

  deletePermanently(id: number): void {
    this.employeeService.permanentlyDeleteEmployee(id).subscribe(() => {
      this.getDeletedEmployees();
    });
  }
}


---

3. recently-deleted.component.html

<h2>Recently Deleted Employees</h2>
<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Department</th>
      <th>Salary</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let emp of deletedEmployees">
      <td>{{ emp.id }}</td>
      <td>{{ emp.name }}</td>
      <td>{{ emp.department }}</td>
      <td>{{ emp.salary }}</td>
      <td>
        <button (click)="restoreEmployee(emp.id)">Restore</button>
        <button (click)="deletePermanently(emp.id)">Delete Permanently</button>
      </td>
    </tr>
  </tbody>
</table>


---

4. Update employee.service.ts

Add these methods:

getDeletedEmployees(): Observable<any[]> {
  return this.http.get<any[]>(`${BASE_URL}/employee/deleted`);
}

restoreEmployee(id: number): Observable<any> {
  return this.http.post(`${BASE_URL}/employee/restore/${id}`, {});
}

permanentlyDeleteEmployee(id: number): Observable<any> {
  return this.http.delete(`${BASE_URL}/employee/permanent/${id}`);
}


---

5. Update app-routing.module.ts

Add route:

import { RecentlyDeletedComponent } from './components/recently-deleted/recently-deleted.component';

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent },
  { path: 'deleted', component: RecentlyDeletedComponent } // new
];


---

6. Update app.module.ts

import { RecentlyDeletedComponent } from './components/recently-deleted/recently-deleted.component';

@NgModule({
  declarations: [
    AppComponent,
    GetAllEmployeeComponent,
    PostEmployeeComponent,
    UpdateEmployeeComponent,
    RecentlyDeletedComponent // new
  ],
  ...
})
export class AppModule {}


---

7. Add Navigation in app.component.html

<nav>
  <a routerLink="/">All Employees</a> |
  <a routerLink="/employee">Add Employee</a> |
  <a routerLink="/deleted">Recently Deleted</a>
</nav>
<router-outlet></router-outlet>


---

Let me know if you want to add styling or a confirmation popup before restoring/deleting permanently.

<div class="container">
  <h2>Employee List</h2>

  <div class="button-container">
    <button class="add-button" routerLink="/employee">Add Employee</button>
    <button (click)="downloadCSV()" class="add-button">Download CSV</button>
    <button class="add-button" routerLink="/deleted">View Recently Deleted</button>

    <input type="text" placeholder="Search..." [(ngModel)]="searchText" class="search-box" />
  </div>

  <table class="employee-table">
    <thead>
      <tr>
        <th>
          ID
          <button (click)="sortBy('id', true)">asc</button>
          <button (click)="sortBy('id', false)">des</button>
        </th>
        <th>
          Name
          <button (click)="sortBy('name', true)">asc</button>
          <button (click)="sortBy('name', false)">des</button>
        </th>
        <th>
          Department
          <button (click)="sortBy('department', true)">asc</button>
          <button (click)="sortBy('department', false)">des</button>
        </th>
        <th>
          Salary
          <button (click)="sortBy('salary', true)">asc</button>
          <button (click)="sortBy('salary', false)">des</button>
        </th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let emp of paginatedEmployees()">
        <td>{{ emp.id }}</td>
        <td>{{ emp.name }}</td>
        <td>{{ emp.department }}</td>
        <td>{{ emp.salary }}</td>
        <td>
          <button class="update-button" [routerLink]="['/employee', emp.id]">Update</button>
          <button class="delete-button" (click)="deleteEmployee(emp.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div class="pagination-controls">
    <label for="itemsPerPage">Show: </label>
    <select id="itemsPerPage" [(ngModel)]="itemsPerPage" (change)="changePage(1)">
      <option *ngFor="let size of pageSizeOptions" [value]="size">{{ size }}</option>
    </select>

    <span>Page {{ currentPage }} of {{ totalPages }}</span>

    <button (click)="prevPage()" [disabled]="currentPage === 1">Previous</button>
    <button (click)="nextPage()" [disabled]="currentPage === totalPages">Next</button>
  </div>

  <div class="record-info">
    Showing {{ paginatedEmployees().length }} of {{ filteredList.length }} records
  </div>
</div>




deleteEmployee(id: number): void {
  if (confirm('Are you sure you want to delete this employee?')) {
    this.employeeService.deleteEmployee(id).subscribe({
      next: () => {
        this.getAllEmployees(); // refresh list
      },
      error: (err) => {
        console.error('Error deleting employee:', err);
      }
    });
  }
}

deleteEmployee(id: number): Observable<any> {
  return this.http.delete(`${BASE_URL}/employee/${id}`);
}
