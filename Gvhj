Thanks for sharing everything. I reviewed your full code and found multiple issues causing the Recently Deleted page not to work. Here's a fixed and fully working version of your setup:


---

Spring Boot Backend Fixes

1. Soft delete implementation fix in deleteEmployee()

Your method deletes the employee from the database. Instead, it should mark isDeleted = true.

Fix in EmployeeService.java:

public void deleteEmployee(Long id) {
    Employee emp = employeeRepository.findById(id)
        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));
    emp.setIsDeleted(true);
    employeeRepository.save(emp);
}

2. getAllEmployees() should return only active (not deleted) employees

public List<EmployeeDTO> getAllEmployees() {
    return employeeRepository.findByIsDeletedFalse()
        .stream()
        .map(emp -> new EmployeeDTO(emp.getId(), emp.getName(), emp.getDepartment(), emp.getSalary()))
        .collect(Collectors.toList());
}

3. Add method for fetching deleted employees

public List<EmployeeDTO> getDeletedEmployees() {
    return employeeRepository.findByIsDeletedTrue()
        .stream()
        .map(emp -> new EmployeeDTO(emp.getId(), emp.getName(), emp.getDepartment(), emp.getSalary()))
        .collect(Collectors.toList());
}

4. Add new endpoint in EmployeeController

@GetMapping("/deleted")
public ResponseEntity<List<EmployeeDTO>> getDeletedEmployees() {
    return ResponseEntity.ok(employeeService.getDeletedEmployees());
}


---

Angular Frontend Fixes

1. Fix employee.service.ts

Update URL strings properly using backticks `` instead of quotes:

getAllEmployee(): Observable<any[]> {
  return this.http.get<any[]>(`${BASE_URL}/employee`);
}

deleteEmployee(id: number): Observable<any> {
  return this.http.delete(`${BASE_URL}/employee/${id}`);
}

getDeletedEmployees(): Observable<any[]> {
  return this.http.get<any[]>(`${BASE_URL}/employee/deleted`);
}

restoreEmployee(id: number): Observable<any> {
  return this.http.patch(`${BASE_URL}/employee/restore/${id}`, {});
}

permanentlyDeleteEmployee(id: number): Observable<any> {
  return this.http.delete(`${BASE_URL}/employee/permanent/${id}`);
}


---

2. Fix spelling mistake in recently-deleted.component.ts

export class RecentlyDeletedComponent implements OnInit {
  deletedEmployees: any[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getDeletedEmployees();
  }

  getDeletedEmployees(): void {
    this.employeeService.getDeletedEmployees().subscribe((res) => {
      this.deletedEmployees = res;
    });
  }

  restoreEmployee(id: number): void {
    this.employeeService.restoreEmployee(id).subscribe(() => {
      this.getDeletedEmployees();
    });
  }

  deletePermanently(id: number): void {
    this.employeeService.permanentlyDeleteEmployee(id).subscribe(() => {
      this.getDeletedEmployees();
    });
  }
}


---

*3. Fix ngFor and bindings in recently-deleted.component.html

<h2>Recently Deleted Employees</h2>

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Department</th>
      <th>Salary</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let emp of deletedEmployees">
      <td>{{ emp.id }}</td>
      <td>{{ emp.name }}</td>
      <td>{{ emp.department }}</td>
      <td>{{ emp.salary }}</td>
      <td>
        <button (click)="restoreEmployee(emp.id)">Restore</button>
        <button (click)="deletePermanently(emp.id)">Delete Permanently</button>
      </td>
    </tr>
  </tbody>
</table>


---

Routing Fix in app-routing.module.ts

const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent },
  { path: 'deleted', component: RecentlyDeletedComponent }
];


---

Summary:

Your backend was physically deleting employees instead of soft deleting. Fixed.

Your Angular service had broken URL templates. Fixed.

RecentlyDeletedComponent had typo in *ngFor and method names. Fixed.

Backend now returns deleted employees properly via /employee/deleted.


Test it now. If you want, I can send all final files organized for you too.

Let me know if you also want toast alerts after actions like delete/restore.
