To implement a soft delete feature in your Angular and Spring Boot application, allowing for restoring or permanently deleting records, follow the steps below:


---

ðŸ›  Backend (Spring Boot)

1. Update the Employee Entity

Add a deleted flag to indicate soft deletion:

@Entity
@Table(name = "employees")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Department is required")
    private String department;

    @Min(value = 1, message = "Salary must be greater than 0")
    private double salary;

    private boolean deleted = false;

    // Getters and setters
}

2. Modify the Repository

Extend JpaRepository and add a method to find non-deleted employees:

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByDeletedFalse();
}

3. Update the Service Layer

Implement methods to handle soft delete, restore, and permanent delete:

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findByDeletedFalse();
    }

    public List<Employee> getDeletedEmployees() {
        return employeeRepository.findAll().stream()
                .filter(Employee::isDeleted)
                .collect(Collectors.toList());
    }

    public void softDeleteEmployee(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        employee.setDeleted(true);
        employeeRepository.save(employee);
    }

    public void restoreEmployee(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        employee.setDeleted(false);
        employeeRepository.save(employee);
    }

    public void permanentlyDeleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}

4. Update the Controller

Add endpoints for soft delete, restore, and permanent delete:

@RestController
@RequestMapping("/employee")
@CrossOrigin
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/deleted")
    public List<Employee> getDeletedEmployees() {
        return employeeService.getDeletedEmployees();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> softDeleteEmployee(@PathVariable Long id) {
        employeeService.softDeleteEmployee(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/restore/{id}")
    public ResponseEntity<Void> restoreEmployee(@PathVariable Long id) {
        employeeService.restoreEmployee(id);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/permanent/{id}")
    public ResponseEntity<Void> permanentlyDeleteEmployee(@PathVariable Long id) {
        employeeService.permanentlyDeleteEmployee(id);
        return ResponseEntity.noContent().build();
    }
}


---

ðŸŽ¨ Frontend (Angular)

1. Update the Service

Add methods to handle soft delete, restore, and permanent delete:

// employee.service.ts
@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private baseUrl = 'http://localhost:8080/employee';

  constructor(private http: HttpClient) {}

  getAllEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(`${this.baseUrl}`);
  }

  getDeletedEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(`${this.baseUrl}/deleted`);
  }

  softDeleteEmployee(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`);
  }

  restoreEmployee(id: number): Observable<void> {
    return this.http.put<void>(`${this.baseUrl}/restore/${id}`, {});
  }

  permanentlyDeleteEmployee(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/permanent/${id}`);
  }
}

2. Create a Component for Deleted Employees

Generate a new component:

ng generate component components/deleted-employees

Implement the logic to display and manage deleted employees:

// deleted-employees.component.ts
@Component({
  selector: 'app-deleted-employees',
  templateUrl: './deleted-employees.component.html',
  styleUrls: ['./deleted-employees.component.css']
})
export class DeletedEmployeesComponent implements OnInit {

  deletedEmployees: Employee[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.loadDeletedEmployees();
  }

  loadDeletedEmployees(): void {
    this.employeeService.getDeletedEmployees().subscribe(data => {
      this.deletedEmployees = data;
    });
  }

  restoreEmployee(id: number): void {
    this.employeeService.restoreEmployee(id).subscribe(() => {
      this.loadDeletedEmployees();
    });
  }

  permanentlyDeleteEmployee(id: number): void {
    this.employeeService.permanentlyDeleteEmployee(id).subscribe(() => {
      this.loadDeletedEmployees();
    });
  }
}

3. Update the Template

<!-- deleted-employees.component.html -->
<div class="container">
  <h2>Recently Deleted Employees</h2>
  <table class="table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let emp of deletedEmployees">
        <td>{{ emp.id }}</td>
        <td>{{ emp.name }}</td>
        <td>{{ emp.department }}</td>
        <td>{{ emp.salary }}</td>
        <td>
          <button class="btn btn-success" (click)="restoreEmployee(emp.id)">Restore</button>
          <button class="btn btn-danger" (click)="permanentlyDeleteEmployee(emp.id)">Delete Permanently</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

4. Update Routing

Add a route for the deleted employees component:

// app-routing.module.ts
const routes: Routes = [
  { path: '', component: GetAllEmployeeComponent },
  { path: 'employee', component: PostEmployeeComponent },
  { path: 'employee/:id', component: UpdateEmployeeComponent },
  { path: 'deleted-employees', component: DeletedEmployeesComponent }
];


---

With these implementations, your application will support soft deletion of employees, allowing users to restore or permanently delete records as needed.
To implement soft delete with a "Recently Deleted" section and options to restore or permanently delete, follow the updated code across the key parts of your Spring Boot app:


---

1. Employee.java (Entity)

Add a new isDeleted field:

@Entity
@Table(name = "employees")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Department is required")
    private String department;

    @Min(value = 1, message = "Salary must be greater than 0")
    private double salary;

    private boolean isDeleted = false; // for soft delete

    // Getters and Setters
}


---

2. EmployeeDTO.java

public class EmployeeDTO {
    private Long id;

    @NotBlank(message = "Name cannot be empty")
    private String name;

    @NotBlank(message = "Department cannot be empty")
    private String department;

    @Min(value = 1, message = "Salary must be positive")
    private double salary;

    public EmployeeDTO() {}

    public EmployeeDTO(Long id, String name, String department, double salary) {
        this.id = id;
        this.name = name;
        this.department = department;
        this.salary = salary;
    }

    // Getters and Setters
}


---

3. EmployeeRepository.java

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByIsDeletedFalse();
    List<Employee> findByIsDeletedTrue();
}


---

4. EmployeeService.java

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public Employee saveEmployee(EmployeeDTO dto) {
        Employee e = new Employee();
        e.setName(dto.getName());
        e.setDepartment(dto.getDepartment());
        e.setSalary(dto.getSalary());
        return employeeRepository.save(e);
    }

    public List<EmployeeDTO> getAllEmployees() {
        return employeeRepository.findByIsDeletedFalse()
            .stream()
            .map(e -> new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary()))
            .collect(Collectors.toList());
    }

    public List<EmployeeDTO> getDeletedEmployees() {
        return employeeRepository.findByIsDeletedTrue()
            .stream()
            .map(e -> new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary()))
            .collect(Collectors.toList());
    }

    public EmployeeDTO getEmployeeById(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));
        return new EmployeeDTO(e.getId(), e.getName(), e.getDepartment(), e.getSalary());
    }

    public Employee updateEmployee(Long id, EmployeeDTO dto) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setName(dto.getName());
        e.setDepartment(dto.getDepartment());
        e.setSalary(dto.getSalary());

        return employeeRepository.save(e);
    }

    public void softDeleteEmployee(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setIsDeleted(true);
        employeeRepository.save(e);
    }

    public void restoreEmployee(Long id) {
        Employee e = employeeRepository.findById(id)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found"));

        e.setIsDeleted(false);
        employeeRepository.save(e);
    }

    public void permanentlyDeleteEmployee(Long id) {
        if (!employeeRepository.existsById(id)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee not found");
        }
        employeeRepository.deleteById(id);
    }
}


---

5. EmployeeController.java

@RestController
@RequestMapping("/employee")
@CrossOrigin
@Validated
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@Valid @RequestBody EmployeeDTO dto) {
        Employee created = employeeService.saveEmployee(dto);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity<List<EmployeeDTO>> getAllEmployees() {
        return ResponseEntity.ok(employeeService.getAllEmployees());
    }

    @GetMapping("/deleted")
    public ResponseEntity<List<EmployeeDTO>> getDeletedEmployees() {
        return ResponseEntity.ok(employeeService.getDeletedEmployees());
    }

    @GetMapping("/{id}")
    public ResponseEntity<EmployeeDTO> getEmployeeById(@PathVariable Long id) {
        return ResponseEntity.ok(employeeService.getEmployeeById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @Valid @RequestBody EmployeeDTO dto) {
        return ResponseEntity.ok(employeeService.updateEmployee(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> softDelete(@PathVariable Long id) {
        employeeService.softDeleteEmployee(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Soft deleted successfully");
    }

    @PatchMapping("/restore/{id}")
    public ResponseEntity<String> restore(@PathVariable Long id) {
        employeeService.restoreEmployee(id);
        return ResponseEntity.ok("Restored successfully");
    }

    @DeleteMapping("/permanent/{id}")
    public ResponseEntity<String> permanentDelete(@PathVariable Long id) {
        employeeService.permanentlyDeleteEmployee(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Permanently deleted");
    }
}


---

Let me know if you want the Angular code for displaying the "Recently Deleted" list and restore/permanent delete buttons.

